"""
    Created Mon  Oct 7 2019

    @author: danie

    List of constants.
"""

# parameters for the scope of the scrape in id_finder.py.  Start here if you
# are building a new search engine/summarizer.
START_YEAR = 2003
END_YEAR = 2009
SEASON_TYPE = 2     #see SEASON_TYPE_NAMES below

# static elements of the urls that are to be looked up. Typical format:
# http://www.espn.com/nba/team/schedule/_/name/wsh/season/2016/seasontype/2
SCHEDULE_ROOT = 'http://www.espn.com/nba/team/schedule/_/name/'
TEAM_ABBREVIATIONS = ['atl', 'bos', 'bkn', 'cle', 'cha', 'chi', 'dal', 'den', 
    'det', 'gs', 'hou', 'ind', 'lac', 'lal', 'mem', 'mia', 'mil', 'min', 'no', 
    'ny', 'okc', 'orl', 'phi', 'phx', 'por', 'sac', 'sa', 'tor', 'utah', 'wsh']
SEASON_TYPE_NAMES = {1 : 'preseason', 2 : 'regular_season' , 3 : 'postseason'} 

# path from the top level (where run.py is) to the directory containing the
# program files.
RELATIVE_PATH = 'hoopsearch/'

# file paths for the files generated by id_finder.py; a txt file containing
# a list of valid game IDs, and a text file containing a list of urls that need
# to be retried.
ID_FILE_PATH = (RELATIVE_PATH
    + 'data/raw/' 
    + 'espn_game_ids_{0}_{1}-{2}.txt'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )
URL_RETRY_PATH = RELATIVE_PATH + 'data/raw/id_retry_urls.txt'


# file path for the raw data csv file created by raw_data_collector.py. File
# is used in many programs.
RAW_DATA_PATH = (RELATIVE_PATH 
    + 'data/raw/' 
    + 'raw_data_{0}_{1}-{2}.csv'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )
# the script raw_data_collector.py accesses a couple of espn.com webpages for
# each game id in the txt file at ID_LIST_PATH.  A list of ID's for which the
# webpages could not be accessed is stored in a txt file at ID_RETRY_PATH so 
# they can be tried again later.
ID_RETRY_PATH = RELATIVE_PATH + 'raw/error_ids.txt'


# the tree model that predicts the most descriptive sentence of a game article
# requires cleaned feature vectors X and labels y for each feature vector. 
# The labels are created by tree_model_labelling.py and stored at 
# LABELLED_DATA_PATH.  The X-y pairs are created by tree_model_preprocessing.py
# and stored at Xy_DATA_PATH.
LABELLED_DATA_PATH = (RELATIVE_PATH 
    + 'processed/' 
    + 'labels_{0}_{1}-{2}.csv'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )
Xy_DATA_PATH = (RELATIVE_PATH 
    + 'processed/'
    + 'Xy_data_balanced_{0}_{1}-{2}.csv'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )


# path for the latent semantic analysis (truncated SVD) model used for 'concept
# vector extraction'. Model file is created by LSA_model.py and used by
# 'database_constructor.py' and 'search_engine.py'.
LSA_MODEL_PATH = RELATIVE_PATH + 'models/lsa_model.joblib'

# path for the tree model used for predicting the most descriptive sentence of
# a given game article. Model file is created by 'tree_model.py' and used by
# 'summarizer.py'.
TREE_MODEL_PATH = RELATIVE_PATH + 'models/tree_model_balanced.joblib'


# paths to the pickled dataframes 
FEATURES_PATH = (RELATIVE_PATH 
    + 'data/processed/'
    + 'game_features_{0}_{1}-{2}.pickle'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )
ART_NAMES_PATH = (RELATIVE_PATH 
    + 'data/processed/'
    + 'article_names_{0}_{1}-{2}.pickle'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )
TEAMS_PATH = (RELATIVE_PATH 
    + 'data/processed/'
    + 'teams_{0}_{1}-{2}.pickle'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )
LEADERS_PATH = (RELATIVE_PATH 
    + 'data/processed/'
    + 'leaders_{0}_{1}-{2}.pickle'.format(
        SEASON_TYPE_NAMES[SEASON_TYPE],
        str(START_YEAR),
        str(END_YEAR)
        )
    )

# objects related to cleaning punctuation from text
PUNCTUATION = '!"#$%&\'()*+,./;<=>?@[\\]^_`{|}~'
translator = str.maketrans('', '', PUNCTUATION)

# paths for static lists of player and team names
NAMES_LIST_PATH = RELATIVE_PATH + 'data/raw/nba_player_names.txt' 
TEAMS_LIST_PATH = RELATIVE_PATH + 'data/raw/nba_team_names.txt'
